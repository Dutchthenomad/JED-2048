#!/usr/bin/env python3
"""
Real 2048 Game Test
Test key input with actual 2048 games to verify game state changes.
"""

import sys
from pathlib import Path
import time

# Add project root to path
sys.path.append(str(Path(__file__).parent.parent))

from core.improved_vision import ImprovedBoardVision

def test_2048_game_sites():
    """Test with multiple 2048 game sites"""
    print("üéØ Real 2048 Game Testing")
    print("=" * 40)

    # List of 2048 game URLs to try
    game_sites = [
        "https://play2048.co/",
        "https://2048game.com/",
        "https://gabrielecirulli.github.io/2048/",
        "https://hczhcz.github.io/2048/",
    ]

    try:
        from playwright.sync_api import sync_playwright

        with sync_playwright() as p:
            browser = p.chromium.launch(headless=False)
            page = browser.new_page()

            # Try each site until one works
            working_site = None
            for site in game_sites:
                print(f"\nüìã Trying: {site}")
                try:
                    page.goto(site, timeout=15000)  # 15 second timeout

                    # Wait for page load
                    time.sleep(3)

                    # Look for common 2048 game elements
                    if (page.locator(".game-container").count() > 0 or
                        page.locator("#game-container").count() > 0 or
                        page.locator(".grid-container").count() > 0):

                        print(f"‚úÖ Game found at {site}")
                        working_site = site
                        break
                    else:
                        print(f"‚ùå No game elements found")

                except Exception as e:
                    print(f"‚ùå Failed to load: {str(e)[:50]}...")
                    continue

            if not working_site:
                print("\n‚ö†Ô∏è  No working 2048 sites found, creating local test game...")
                return test_local_2048_game(page)

            # Test with working site
            return test_game_interaction(page, working_site)

    except Exception as e:
        print(f"‚ùå Browser error: {e}")
        return False

def test_local_2048_game(page):
    """Create and test with a local 2048-style game"""
    print("\nüéÆ Creating Local 2048 Test Game...")

    # Simple 2048-like game for testing
    local_game_html = '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>2048 Test Game</title>
        <style>
            body { font-family: Arial; margin: 50px; background: #faf8ef; }
            .game-container { width: 500px; margin: 0 auto; }
            .grid {
                display: grid;
                grid-template-columns: repeat(4, 100px);
                grid-gap: 10px;
                background: #bbada0;
                padding: 10px;
                border-radius: 10px;
            }
            .tile {
                width: 100px;
                height: 100px;
                background: #cdc1b4;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 32px;
                font-weight: bold;
                border-radius: 5px;
            }
            .tile-2 { background: #eee4da; color: #776e65; }
            .tile-4 { background: #ede0c8; color: #776e65; }
            .score-container { text-align: center; margin: 20px 0; font-size: 24px; }
            .controls { text-align: center; margin: 20px 0; color: #776e65; }
        </style>
    </head>
    <body>
        <div class="game-container">
            <h1 style="text-align: center; color: #776e65;">2048 Test Game</h1>

            <div class="score-container">
                Score: <span id="score">0</span>
            </div>

            <div class="grid" id="grid">
                <!-- Grid cells will be generated by JavaScript -->
            </div>

            <div class="controls">
                Use arrow keys to move tiles<br>
                <span id="status">Press any arrow key to start</span>
            </div>
        </div>

        <script>
            let score = 0;
            let moves = 0;
            let grid = [
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0]
            ];

            // Initialize with two tiles
            grid[0][0] = 2;
            grid[3][3] = 2;

            function updateDisplay() {
                const gridElement = document.getElementById('grid');
                gridElement.innerHTML = '';

                for (let r = 0; r < 4; r++) {
                    for (let c = 0; c < 4; c++) {
                        const tile = document.createElement('div');
                        tile.className = 'tile';
                        if (grid[r][c] > 0) {
                            tile.textContent = grid[r][c];
                            tile.className += ` tile-${grid[r][c]}`;
                        }
                        gridElement.appendChild(tile);
                    }
                }

                document.getElementById('score').textContent = score;
            }

            function moveLeft() {
                let moved = false;
                for (let r = 0; r < 4; r++) {
                    let row = grid[r].filter(val => val !== 0);
                    while (row.length < 4) row.push(0);

                    for (let c = 0; c < 4; c++) {
                        if (grid[r][c] !== row[c]) moved = true;
                        grid[r][c] = row[c];
                    }
                }
                return moved;
            }

            function moveRight() {
                let moved = false;
                for (let r = 0; r < 4; r++) {
                    let row = grid[r].filter(val => val !== 0);
                    while (row.length < 4) row.unshift(0);

                    for (let c = 0; c < 4; c++) {
                        if (grid[r][c] !== row[c]) moved = true;
                        grid[r][c] = row[c];
                    }
                }
                return moved;
            }

            function moveUp() {
                let moved = false;
                for (let c = 0; c < 4; c++) {
                    let col = [];
                    for (let r = 0; r < 4; r++) {
                        if (grid[r][c] !== 0) col.push(grid[r][c]);
                    }
                    while (col.length < 4) col.push(0);

                    for (let r = 0; r < 4; r++) {
                        if (grid[r][c] !== col[r]) moved = true;
                        grid[r][c] = col[r];
                    }
                }
                return moved;
            }

            function moveDown() {
                let moved = false;
                for (let c = 0; c < 4; c++) {
                    let col = [];
                    for (let r = 0; r < 4; r++) {
                        if (grid[r][c] !== 0) col.push(grid[r][c]);
                    }
                    while (col.length < 4) col.unshift(0);

                    for (let r = 0; r < 4; r++) {
                        if (grid[r][c] !== col[r]) moved = true;
                        grid[r][c] = col[r];
                    }
                }
                return moved;
            }

            document.addEventListener('keydown', function(e) {
                let moved = false;

                switch(e.key) {
                    case 'ArrowLeft':
                        moved = moveLeft();
                        break;
                    case 'ArrowRight':
                        moved = moveRight();
                        break;
                    case 'ArrowUp':
                        moved = moveUp();
                        break;
                    case 'ArrowDown':
                        moved = moveDown();
                        break;
                }

                if (moved) {
                    moves++;
                    score += 10;
                    document.getElementById('status').textContent = `Move ${moves}: ${e.key} pressed - tiles moved!`;
                    updateDisplay();
                } else if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {
                    document.getElementById('status').textContent = `Move ${moves + 1}: ${e.key} pressed - no movement possible`;
                }

                e.preventDefault();
            });

            // Initial display
            updateDisplay();
        </script>
    </body>
    </html>
    '''

    try:
        page.goto(f'data:text/html,{local_game_html}')
        print("‚úÖ Local test game loaded")
        time.sleep(2)

        return test_game_interaction(page, "Local Test Game")

    except Exception as e:
        print(f"‚ùå Local game failed: {e}")
        return False

def test_game_interaction(page, site_name):
    """Test actual game interaction with arrow keys"""
    print(f"\nüéÆ Testing Game Interaction: {site_name}")

    try:
        # Take initial screenshot
        print("üì∏ Taking initial screenshot...")
        page.screenshot(path="game_initial.png")

        # Test each direction
        test_moves = [
            ('ArrowRight', 'RIGHT ‚û°Ô∏è'),
            ('ArrowDown', 'DOWN ‚¨áÔ∏è'),
            ('ArrowLeft', 'LEFT ‚¨ÖÔ∏è'),
            ('ArrowUp', 'UP ‚¨ÜÔ∏è')
        ]

        for i, (key, description) in enumerate(test_moves):
            print(f"\nüìã Move {i+1}: {description}")

            # Send key
            page.keyboard.press(key)
            print(f"   ‚úÖ Sent {key}")

            # Wait for animation
            time.sleep(1)

            # Take screenshot
            screenshot_name = f"game_move_{i+1}_{key.lower()}.png"
            page.screenshot(path=screenshot_name)
            print(f"   üì∏ Screenshot: {screenshot_name}")

            # Try to read score if possible
            try:
                score_selectors = ["#score", ".score", "[class*='score']", "#current-score"]
                for selector in score_selectors:
                    if page.locator(selector).count() > 0:
                        score_text = page.locator(selector).text_content()
                        print(f"   üìä Score: {score_text}")
                        break
            except:
                pass

            # Try to read status/moves
            try:
                status_selectors = ["#status", ".status", "[id*='status']"]
                for selector in status_selectors:
                    if page.locator(selector).count() > 0:
                        status_text = page.locator(selector).text_content()
                        print(f"   ‚ÑπÔ∏è  Status: {status_text}")
                        break
            except:
                pass

        print("\nüîç Manual Verification Required:")
        print("   1. Did you see tiles moving in the browser?")
        print("   2. Did the score change after moves?")
        print("   3. Were screenshots captured successfully?")

        # Wait for user verification
        result = input("\n‚ùì Did you observe actual game changes? (y/n): ")

        if result.lower().startswith('y'):
            print("‚úÖ GAME INTERACTION CONFIRMED!")
            return True
        else:
            print("‚ùå Game interaction not confirmed")
            return False

    except Exception as e:
        print(f"‚ùå Game interaction test failed: {e}")
        return False

def main():
    """Main test function"""
    print("üöÄ Starting Real 2048 Game Test")
    print("This will test if our automation can actually play 2048!")

    success = test_2048_game_sites()

    if success:
        print("\nüéâ SUCCESS: Automation can play 2048!")
        print("‚úÖ Key inputs work")
        print("‚úÖ Game responds to automation")
        print("‚úÖ Visual changes confirmed")
        print("\nüéØ Ready for full automation pipeline!")
    else:
        print("\n‚ùå Issues detected with game interaction")
        print("üîß May need debugging or alternative approach")

if __name__ == "__main__":
    main()